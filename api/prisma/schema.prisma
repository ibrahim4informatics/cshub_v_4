generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid())
  first_name  String      @db.VarChar(35)
  last_name   String      @db.VarChar(35)
  password    String?
  google_id   String?     @unique
  email       String      @unique
  is_admin    Boolean     @default(false)
  created_at  DateTime    @default(now())
  documents   Document[]  @relation("owner who post the document")
  favourites  Favourite[]
  otp_code_id Int?        @unique
  otp_code    Otp?        @relation(fields: [otp_code_id], references: [id], onDelete: SetNull)
}

model Otp {
  id         Int      @id @default(autoincrement())
  value      String   @db.VarChar(6)
  attempt    Int      @default(0) @db.SmallInt
  is_valid   Boolean  @default(true)
  user       User?
  created_at DateTime @default(now())
}

model Module {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(125)
  coeficient Int        @db.SmallInt
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  documents  Document[]
}

model Document {
  id            Int          @id @default(autoincrement())
  title         String       @db.VarChar(150)
  type          DocumentType
  download_link String
  module_id     Int
  owner_id      String
  module        Module       @relation(fields: [module_id], references: [id], onDelete: Cascade)
  owner         User         @relation("owner who post the document", fields: [owner_id], references: [id], onDelete: Cascade)
  favourite_by  Favourite[]
}

model Favourite {
  id          Int      @id @default(autoincrement())
  user_id     String
  document_id Int
  created_at  DateTime @default(now())
  document    Document @relation(fields: [document_id], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum DocumentType {
  COURS
  EXAM
  TD
  TP
  HELPER
}
